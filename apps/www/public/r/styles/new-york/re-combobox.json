{
  "name": "re-combobox",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "re-form"
  ],
  "files": [
    {
      "path": "ui/reform/re-combobox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { InputHTMLAttributes } from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { useFormContext } from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, ButtonProps } from \"@/registry/new-york/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/new-york/ui/command\"\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\"\nimport { ReFormFieldProps } from \"@/registry/new-york/ui/reform/re-form\"\n\nexport type Props = InputHTMLAttributes<HTMLInputElement> & {\n  className?: string\n  name: string\n  label?: string\n  description?: string\n  options: {\n    label: string\n    value: string\n  }[]\n}\n\nconst ReCombobox = React.forwardRef<\n  HTMLButtonElement,\n  ButtonProps &\n    ReFormFieldProps & {\n      placeholder?: string\n      options: {\n        label: string\n        value: string\n      }[]\n      width?: string\n      icon?: React.ReactNode\n      notFoundMessage?: string\n    }\n>(\n  (\n    {\n      className,\n      name,\n      label,\n      description,\n      options,\n      placeholder = \"Search ...\",\n      variant = \"outline\",\n      width = \"w-[200px]\",\n      icon,\n      notFoundMessage = \"No items found.\",\n      ...props\n    },\n    ref\n  ) => {\n    const form = useFormContext()\n    if (!form)\n      return (\n        <div className=\"text-destructive text-sm\">Form context not found</div>\n      )\n\n    return (\n      <FormField\n        control={form.control}\n        name={name}\n        render={({ field }) => (\n          <FormItem className={cn(\"flex flex-col\", className)}>\n            {label && <FormLabel>{label}</FormLabel>}\n            <Popover>\n              <PopoverTrigger asChild>\n                <FormControl>\n                  <Button\n                    ref={ref}\n                    {...props}\n                    variant={variant}\n                    role=\"combobox\"\n                    className={cn(\n                      \"w-[200px] justify-between\",\n                      width,\n                      !field.value && \"text-muted-foreground\"\n                    )}\n                  >\n                    {field.value\n                      ? options.find((options) => options.value === field.value)\n                          ?.label\n                      : \"Select language\"}\n                    {icon || (\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    )}\n                  </Button>\n                </FormControl>\n              </PopoverTrigger>\n              <PopoverContent className={cn(\"w-[200px] p-0\", width)}>\n                <Command>\n                  <CommandInput placeholder={placeholder} />\n                  <CommandList>\n                    <CommandEmpty>{notFoundMessage}</CommandEmpty>\n                    <CommandGroup>\n                      {options.map((options) => (\n                        <CommandItem\n                          value={options.label}\n                          key={options.value}\n                          onSelect={() => {\n                            form.setValue(name, options.value)\n                          }}\n                        >\n                          {options.label}\n                          <Check\n                            className={cn(\n                              \"ml-auto\",\n                              options.value === field.value\n                                ? \"opacity-100\"\n                                : \"opacity-0\"\n                            )}\n                          />\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n            {description && <FormDescription>{description}</FormDescription>}\n            <FormMessage className=\"reform-message text-xs\" />\n          </FormItem>\n        )}\n      />\n    )\n  }\n)\n\nReCombobox.displayName = \"ReCombobox\"\nexport { ReCombobox }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}