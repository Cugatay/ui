{
  "name": "re-form-error-validation",
  "type": "registry:example",
  "registryDependencies": [
    "re-form",
    "re-error-area",
    "re-input",
    "re-submit"
  ],
  "files": [
    {
      "path": "examples/reform/re-form-error-validation.tsx",
      "content": "\"use client\"\n\nimport { wait } from \"next/dist/lib/wait\"\nimport { z } from \"zod\"\n\nimport { ReErrorArea } from \"@/registry/default/ui/reform/re-error-area\"\nimport { ReForm } from \"@/registry/default/ui/reform/re-form\"\nimport { ReInput } from \"@/registry/default/ui/reform/re-input\"\nimport { ReSubmit } from \"@/registry/default/ui/reform/re-submit\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport default function ReFormError() {\n  const handleSubmit = async () => {\n    await wait(500)\n    throw {\n      message: \"Validation failed\",\n      validations: [\n        {\n          property: \"username\",\n          constraints: {\n            minLength: \"Username must be longer than or equal to 4 characters\",\n          },\n        },\n      ],\n    }\n  }\n\n  return (\n    <ReForm\n      schema={formSchema}\n      onSubmit={handleSubmit}\n      defaultValues={{ username: \"kod\" }}\n      className=\"w-2/3 space-y-6\"\n    >\n      <ReInput\n        label=\"Username\"\n        name=\"username\"\n        placeholder=\"username, email or phone number\"\n        description=\"This is your public display name.\"\n      />\n      <ReErrorArea />\n      <ReSubmit>Submit</ReSubmit>\n    </ReForm>\n  )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}