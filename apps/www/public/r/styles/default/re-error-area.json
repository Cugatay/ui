{
  "name": "re-error-area",
  "type": "registry:ui",
  "dependencies": [
    "react-hook-form"
  ],
  "registryDependencies": [
    "re-form",
    "re-input",
    "re-submit"
  ],
  "files": [
    {
      "path": "ui/reform/re-error-area.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { HTMLAttributes } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\n\nexport type Props = HTMLAttributes<HTMLDivElement> & {\n  name?: string\n}\n\nconst ReErrorArea = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    name?: string\n  }\n>(({ className, name = \"root\", ...props }, ref) => {\n  const {\n    formState: { errors },\n  } = useFormContext()\n  const error =\n    name === \"root\" && typeof errors[name] === \"object\"\n      ? Object.values(errors[name] as Record<string, { message: string }>)\n      : errors[name]\n\n  return (\n    <div ref={ref} className={`reform-errorarea ${className}`} {...props}>\n      {error && (\n        <div className=\"text-destructive text-sm\" aria-live=\"assertive\">\n          {Array.isArray(error) ? (\n            <ul>\n              {error.map((i, k) => (\n                <li key={k}>{String(i?.message)}</li>\n              ))}\n            </ul>\n          ) : (\n            <>{String(error.message)}</>\n          )}\n        </div>\n      )}\n    </div>\n  )\n})\n\nexport { ReErrorArea }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}