{
  "name": "re-input",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "re-form",
    "re-submit"
  ],
  "files": [
    {
      "path": "ui/reform/re-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useFormContext } from \"react-hook-form\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/default/ui/form\"\nimport { Input } from \"@/registry/default/ui/input\"\nimport { ReFormFieldProps } from \"@/registry/default/ui/reform/re-form\"\n\nconst ReInput = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentProps<\"input\"> & ReFormFieldProps\n>(({ className, type = \"text\", name, label, description, ...props }, _) => {\n  const form = useFormContext()\n\n  return (\n    <FormField\n      defaultValue={\"\"}\n      control={form.control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          {label && <FormLabel>{label}</FormLabel>}\n          <FormControl>\n            <Input\n              type={type}\n              className={cn(\"reform-element\", className)}\n              {...props}\n              {...field}\n            />\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage className=\"reform-message text-xs\" />\n        </FormItem>\n      )}\n    />\n  )\n})\n\nReInput.displayName = \"ReInput\"\nexport { ReInput }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}